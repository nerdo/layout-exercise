@use 'breakpoints';
@use 'variables';
@use 'sass:math';

$bg-gutter: #C2BCBC;
$bg-image: #cccccc;
$bg-content: #F6F4DB;
// $bg-content: transparent;
$gap-size: 50px;

@mixin layout-flex {
    .root {
        padding-bottom: 35px;
        
        > .wrapper {
            display: flex;
            flex-direction: column;    
        }
        
        &+ .root {
            margin-top: $gap-size;
        }

        @include breakpoints.md {
            &+.root {
                margin-top: 0;
            }
            
            > .wrapper {
                flex-direction: row;
                
                // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Controlling_Ratios_of_Flex_Items_Along_the_Main_Ax
                // > .gutter-and-image {
                //     align-self: flex-start;
                //     flex: 30 0 0;
                //     display: flex;
                //     flex-direction: row;
                    
                //     .gutter {
                //         flex-grow: 1;
                //     }

                // }

                .image {
                    flex: 20 0 0;
                    max-width: variables.$max-main-image-width;
                    width: variables.$item-image-width;
                    height: 100%;
                }
                .content {
                    flex: 60 0 0;
                    max-width: variables.$max-main-content-width;;
                }
                
                > .gutter {
                    flex: 10 0 0;
                }
            }

            &:nth-child(even) .wrapper {
                flex-direction: row-reverse;

                > .gutter-and-image {
                    flex-direction: row-reverse;
                }
            }
        }
    }
}

@mixin layout-grid {
    .root {
        &+ .root {
            margin-top: $gap-size;
        }
        
        @include breakpoints.md {
            > .wrapper {
                display: grid;
                grid-template-columns: repeat(10, 1fr);
                
                .gutter .filled {
                    background: $bg-gutter;
                    aspect-ratio: math.div(variables.$item-image-ratio, 2);
                }
        
                .image {
                    grid-column-end: span 2;
                }
                
                .content {
                    grid-column-end: span 6;
                }

            }
            
            // dalbert: using order to reverse even lines
            &:nth-child(even) > .wrapper {
                > .gutter:first-of-type {
                    order: 10;
                }
                > .gutter:last-of-type {
                    order: -1;
                }
                > .image {
                    order: 9;
                }
            }
        }
        
        // dalbert: stop growing at the max-main-width
        @media only screen and (min-width: math.div(variables.$max-main-width, math.div(variables.$main-width-percentage, 100%))) {
            > .wrapper {
                // make the columns fixed width at this point, except for the gutters
                grid-template-columns: 1fr repeat(8, math.div(variables.$max-main-width, 8)) 1fr;
            }    

            > .wrapper .gutter .filled {
                height: variables.$item-image-height;
                aspect-ratio: unset;
            }
        }
    }
}

.root {
    > .wrapper {
        .image {
            background-color: $bg-image;
            aspect-ratio: variables.$item-image-ratio;
            
            img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }
        }

        .content {
            background-color: $bg-content;

            // dalbert: you'd think padding was here... but padding throws flexbox off here! 
            // this must be what Juan was talking about....
            // padding: 0 30px;
            // put it in its own box with padding
            .wrapper {
                padding: 0 30px;
            }
        }
        
        p + * {
            margin-top: 20px;
        }
    }
}

@include layout-flex;
// @include layout-grid; 